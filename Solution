using System;
using System.Linq;
using System.Numerics;
using System.Text;
using System.Collections.Generic;
using System.Collections;
using System.Text.RegularExpressions;

namespace AssociativeArrays
{
    class Program
    {
        static void Main(string[] args)
        {


            //string[] demons = Regex.Split(Console.ReadLine(), @" *,{1} *");

            //Regex healthRegex = new Regex(@"[^+\-*/.\d]");

            //Regex dmgRegex = new Regex(@"((|-)\d+\.\d+|(|-)\d+)");

            //var demonData = new Dictionary<string, KeyValuePair<int, double>>(demons.Length - 1);

            //foreach (var demon in demons.OrderBy(x => x))
            //{
            //    int health = 0;

            //    var sumChar = healthRegex.Matches(demon).ToArray();

            //    foreach (var ch in sumChar)
            //    {
            //        health += char.Parse(ch.Value);
            //    }

            //    double damage = 0;

            //    var dmg = dmgRegex.Matches(demon).ToArray();

            //    foreach (var number in dmg)
            //    {
            //        damage += double.Parse(number.Value);
            //    }

            //    var mathSymbols = Regex.Matches(demon, @"[\*\/]").ToArray();

            //    foreach (var symbol in mathSymbols)
            //    {
            //        var mathOperation = symbol.Value == "*" ? damage *= 2 : damage /= 2;
            //    }

            //    demonData[demon] = new KeyValuePair<int, double>(health, damage);
            //}

            //foreach (var demon in demonData)
            //{
            //    Console.WriteLine($"{demon.Key} - {demon.Value.Key} health, {demon.Value.Value:F2} damage");
            //}





            string regex = @"((|-)\d+\.\d+|(|-)\d+)"; // only double nums
            string multiply = @"\*";

            List<string> input = Regex.Split(Console.ReadLine(), @" *,{1} *").ToList();

            List<double> health = new List<double>();
            List<double> damage = new List<double>();

            int currentHealth = 0;

            input.Sort();

            double baseDamage = 0;


            for (int i = 0; i < input.Count; i++)
            {
                foreach (char item in input[i])
                {
                    
                    if (char.IsDigit(item) || item == '.' || item == '+' || item == '-' || item == '*' || item == '/')
                    {
                        continue;
                    }
                    else
                    {
                        int num = (int)(item);
                        currentHealth += num;

                        
                    }
                }
                health.Add(currentHealth);
                currentHealth = 0;
                
            }

            foreach (var test in input)
            {
                

                MatchCollection Matches = Regex.Matches(test, regex);

                foreach (Match ch in Matches)
                {
                    double currentNum = double.Parse(ch.Groups[1].Value);
                    baseDamage += currentNum;

                }

                foreach (var item in test)
                {
                    
                        if (item == '*')
                        {
                            baseDamage *= 2;
                        }
                        else if (item == '/')
                        {
                            baseDamage /= 2;
                        }
                    
                    
                }
                damage.Add(baseDamage);
                baseDamage = 0;
            }

            

            for (int i = 0; i < input.Count; i++)
            {
                Console.WriteLine($"{input[i]} - {health[i]} health, {damage[i]:f2} damage");
            }
        }
    }
}
